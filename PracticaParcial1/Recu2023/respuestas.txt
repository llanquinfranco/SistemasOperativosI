PUNTO 2

a) En el programa del ejercicio 1 no se produce deadlock ya que no hay recursos compartidos
bloqueantes entre los procesos. Esto se debe a que ambos procesos trabajan sobre rangos de 
numeros distintos y no comparten semaforos, o algun recurso que pueda generar un espera
circular


b) Para poner en estado de listo a un proceso que estaba durmiendo pero su tiempo de dormir 
finalizo, XINU utiliza la llamada al sistema 'wakeup', que a su vez invoca a ready(), para
cambiar el estado del proceso de 'PR_SLEEP' a 'PR_READY' y colocarlo en la cola de listos.
(Explicado en xinu-pc/system/wakeup.c y xinu-pc/system/ready.c)


c) Si el Proceso 1 usó 20 ráfagas de CPU y el Proceso 2 tiene el 80% del uso de la CPU, 
entonces el Proceso 1 solo accede al 20% del tiempo. Esto significa que, por cada 100 unidades
de tiempo de CPU total, el Proceso 1 solo ejecuta durante 20, lo cual implica que para usar 20
ráfagas, el sistema necesitó 100 ráfagas en total. Como solo el 20% de tiempo era para él, 
necesitó esperar durante el otro 80% restante del tiempo, entonces:
    Tiempo total transcurrido: 20/0.2 = 100
    Tiempo efectivo de CPU del Proceso 1: 20
    Tiempo de espera = 100 - 20 = 80 unidades
Por lo tanto, el tiempo de espera del proceso 1 es 80 unidades de tiempo.


d) Funciones propias: 
    controlProcesos
    encontrarPrimos

Funcion de biblioteca de C:
    printf(): para imprimir en pantalla (incluida en <stdio.h>)

System calls de XINU:
    create: crea un nuevo proceso
    resume: inicia o reanuda la ejecucion de un proceso